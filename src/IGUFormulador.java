
import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.parser.PdfTextExtractor;
import java.io.File;
import java.io.IOException;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author WIN8
 */
public class IGUFormulador extends javax.swing.JFrame {

    
    //variables a usar
//    private JFileChooser selector;
    private int tamañoTPdf; //tamaño del texto del pdf
    private String textoPdf; //texto del pdf
    private List<String> filasTexto;
    private List<String> textosImportantes;
    private String filePath;
//    DecimalFormat df = new DecimalFormat("###,###,##0.00");
    /**
     * Creates new form IGUFormulador
     */
    public IGUFormulador() {
        filePath = "";
        initComponents();
        txtImportantes();
    }
    
    //colocar todos los textos de encabezados e importantes
    private void txtImportantes() {
        textosImportantes = new ArrayList<>();
        textosImportantes.add("COSTO");
        textosImportantes.add("TOTAL");
        textosImportantes.add("Valor");
        textosImportantes.add("Total");
        textosImportantes.add("Informe");
        textosImportantes.add("Directorio");
        textosImportantes.add("Presupuesto");
        textosImportantes.add("Und");
        textosImportantes.add("Código");
        textosImportantes.add("Proyecto");
        textosImportantes.add("Compañia");
        textosImportantes.add("Unitario");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jmiAbrir = new javax.swing.JMenuItem();
        jmiGuardar = new javax.swing.JMenuItem();
        jmiSalir = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Formateador PDF");
        setPreferredSize(new java.awt.Dimension(940, 670));

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tabla);

        jMenu1.setText("Archivo");

        jmiAbrir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jmiAbrir.setText("Abrir");
        jmiAbrir.setToolTipText("");
        jmiAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiAbrirActionPerformed(evt);
            }
        });
        jMenu1.add(jmiAbrir);

        jmiGuardar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jmiGuardar.setText("Guardar");
        jmiGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiGuardarActionPerformed(evt);
            }
        });
        jMenu1.add(jmiGuardar);

        jmiSalir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        jmiSalir.setText("Salir");
        jmiSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiSalirActionPerformed(evt);
            }
        });
        jMenu1.add(jmiSalir);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 687, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void obtenerFilasTxt( final String textIn ) {
        String[] arregloString = textIn.split("\n");
        for( int x = 0; x < arregloString.length ; x++ ) { 
              filasTexto.add(arregloString[x]);
        }
        
    }
    
    private boolean hayDosPuntos( final String textIn ) {
        boolean retorno = false;
        String partes[] = textIn.split(":");
        for( int i = 0 ; i < partes.length ; i++ ) {
            if(partes[i].equals("Compañia ") || partes[i].equals("Proyecto ") ) {
                retorno = true;
            }
        }
        return retorno;
    }
    
    private boolean hayArq( final String textIn ) {
        boolean retorno = false;
        String temporal = "";
        for( int i = 0 ; i < textIn.toCharArray().length ; i++ ) {
            temporal += textIn.toCharArray()[i];
            if(temporal.equals("ARQ") ) {
                retorno = true;
                break;
            }
        }
        return retorno;
    }
    
    private boolean hayFecha( final String textIn ) {//metodo saber si hay un string con fecha
        boolean retorno = false;
        int contador = 0; //contar la cantidad de / hay , si hay 3 hay fecha
        for( int i = 0 ; i < textIn.toCharArray().length ; i++ ) {
            if(textIn.toCharArray()[i] == '/' ) {
                contador++;
            }
        }
        if( contador == 2 ) retorno = true;
        return retorno;
    }
    
    private List<String> getTitulo( String textIn ) { //metodo para obtener el titulo del proyecto
        String[] partes = textIn.split(" ");
        List<String> division = new ArrayList<>();
        String temp = "";
        for(int i = 0 ; i < partes.length ; i++ ) {
            if( !hayFecha(partes[i])) {
                temp += partes[i] + " ";
            }
            else {
                division.add(temp);
                division.add(partes[i]);
            }
        }
        return division; 
    }
    
    private boolean isInteger( final String text ) {
        try {
            int temp = Integer.parseInt(text);
            return true;
        }
        catch( NumberFormatException error ) {
            return false;
        }
    }
    
    
    private boolean isIndirect( final String textIn ) {
            if( !textIn.equals("") && textIn.toCharArray()[0] == 'I' && isInteger(""+textIn.toCharArray()[1])) {
                return true;
            }
            else return false;
    }
    
    /*
    *@function getCompany
    *@
    */
    private List<String> getCompany( String textIn ) { //metodo para obtener el titulo del proyecto
        String[] partes = textIn.split(" ");
        List<String> division = new ArrayList<>();
        String temp = "";
        for(int i = 0 ; i < partes.length ; i++ ) {
            if( !isInteger(partes[i])) {
                temp += partes[i] + " ";
            }
            else {
                division.add(temp);
                division.add(partes[i]);
            }
        }
        return division; 
    }
    
    private boolean hayCosto( final String textIn ) {
            String partir[] = textIn.split(" ");
            boolean retorno = false;
            for( int i = 0 ; i < partir.length ; i++ ) {
               if( partir[i].equals("DIRECTO") || partir[i].equals("INDIRECTO")) {
                    retorno = true;
                } 
            }
            return retorno;
    }
    
    private boolean esImportante( final String textIn ) {
            boolean retorno = false;
            for( int i = 0 ; i < textosImportantes.size() ; i++ ) {
               if( textIn.equals(textosImportantes.get(i)) ) {
                    retorno = true;
                } 
            }
            return retorno;
    }
    
    public boolean isNumericTotal(String str) {
        int contComas = 0;
        boolean retorno = false;
        for(int j = 0 ; j < str.toCharArray().length ; j++ ) {
            if( str.toCharArray()[j] == ',' ) {
                contComas++;
            }
        }
        if( contComas >= 2 ) {
            retorno = true;
        }
        return retorno;
    }
    
    private int filaInicioTxt() {  //fila donde empieza 01 y comienza los capitulos
        int filaInicio = 0;
        for( int filas = 0 ; filas < filasTexto.size() ; filas++){
            if( isInteger(filasTexto.get(filas).split(" ")[0]) && !isIndirect(filasTexto.get(filas).split(" ")[0])) {//condicion para cargar los codigos de encabezados sin I
                if(filasTexto.get(filas).split(" ")[0].equals("01")) {
                    filaInicio = filas;
                } 
            }
        }
        return filaInicio;
    }
    
    
        public static boolean isNumeric(String str) {
        String temporal = "";
        for( int i = 0 ; i < str.toCharArray().length ; i++ ) {
            if( str.toCharArray()[i] == ',' || str.toCharArray()[i] == '.' ){
                
            }
            else {
                temporal += str.toCharArray()[i];
            }
        }
        try {
            Long algo = Long.parseLong(temporal);
            return true;
        } catch (NumberFormatException ex) {
            return false;
        }
    }
    
    private double quitarComas( final String str ) {
        double numeroSC = 0.0;
        String temp = "";
        for( int i = 0 ; i < str.toCharArray().length ; i++ ) {
            if( str.toCharArray()[i] != ',') {
                temp += str.toCharArray()[i];
            }
        }
        return numeroSC = Double.parseDouble(temp);
    }
        
    //metodo para obtener los datos de una fila cuando haya un codigo
    private List<String> obtenerFilaOrdenada( final String textIN ) {
        List<String> datos = new ArrayList<>();
        String sinEspacio[] = textIN.split(" ");
        String leyendo = "";
        int contador = 0;
        for( int i = 1 ; i < sinEspacio.length ; i++ ) {
            if( !isNumeric(sinEspacio[i])){
                leyendo += sinEspacio[i]+" ";
            }
            else {
                if( isNumeric(sinEspacio[i+1]) && isNumeric(sinEspacio[i+2])) {
                    contador++;
                }
                else {
                    leyendo += sinEspacio[i]+" ";
                }
            }
            if( contador == 1 ) {
                    String partir[] = leyendo.split(" ");
                    String descripcion = "";
                    for( int j = 0 ; j < partir.length-1 ; j++ ) {
                        descripcion += partir[j] + " ";
                    }
                    datos.add(descripcion); //agrego la descripcion
                    datos.add(partir[partir.length-1]); //agrego la unidad
                    datos.add(Globales.df.format(quitarComas(sinEspacio[partir.length+1]))); //agrego a la lista el valor de cantidad
                    datos.add(Globales.df.format(quitarComas(sinEspacio[partir.length+2])));
                    datos.add(Globales.df.format(quitarComas(sinEspacio[partir.length+3])));
                    break;                    
                }
            
        }
        if( contador == 0 ) {
                    datos.add(leyendo);
                }
        return datos;
    }
    
    private boolean hayCostoDirecto() {
        int fila = tabla.getRowCount();
        boolean retorno = false;
        for (int i = 0; i < fila; i++) { 
            if(tabla.getValueAt(i, 1).equals("COSTO DIRECTO")) {
                retorno = true;
                break;
            }
        }
        return retorno;
    }
    
    private void eliminarEncabezados() {
        int fila = tabla.getRowCount();
        int contador = 0;
        DefaultTableModel modelo = (DefaultTableModel)tabla.getModel();
        for (int i = 0; i < fila; i++) {
            try {
                if(tabla.getValueAt(i, 1).equals("COSTO DIRECTO")) {
                    String[] datos = {"", "", "","","","",""};
                    modelo.insertRow(i+1, datos);
                }
                if( tabla.getValueAt(i, 0).equals("Código")) {
                        if( contador > 0 ) {
                            if( hayCostoDirecto() ) modelo.removeRow(i+4);
                            modelo.removeRow(i+3);
                            modelo.removeRow(i+2);
                            modelo.removeRow(i+1);
                            modelo.removeRow(i);
                            modelo.removeRow(i-1);
                            modelo.removeRow(i-2);
                            modelo.removeRow(i-3);
                            modelo.removeRow(i-4);
                            modelo.removeRow(i-5);
                            modelo.removeRow(i-6);
                            modelo.removeRow(i-7);
                            modelo.removeRow(i-8);
                            modelo.removeRow(i-9);
                        }
                        else {
                            modelo.removeRow(i+2);
                            modelo.removeRow(i+1);
                            contador++;
                        }
                }
            }
            catch( ArrayIndexOutOfBoundsException error) {
                
            } 
        }
    }
    
    private boolean codigoMayor( final String codigoActual , final String codigoAnterior ) {
        if( codigoActual.length() < codigoAnterior.length()) return true;
        else return false;
    }
    
    private void construirTabla() {
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("A");
        modelo.addColumn("B");
        modelo.addColumn("C");
        modelo.addColumn("D");
        modelo.addColumn("E");
        modelo.addColumn("F");
        //construimo la tabla con campos vacios pero la misma cantidad de filas que el pdf original
        for( int filas = 0 ; filas < filasTexto.size() ; filas++){
            Object data[] = new Object[modelo.getColumnCount()];
                data[0] = "";
                data[1] = "";
                data[2] = "";
                data[3] = "";
                data[5] = "";
                data[4] = "";
                modelo.addRow(data);
        }
        int contarValores = 0; //variable que cuenta la cantidad de la palabra valor en el pdf
        int filaValor = 0; //fila donde se encuentra la primer palabra valor
        for( int x = 0; x < filasTexto.size() ; x++ ) { 
            if( hayDosPuntos(filasTexto.get(x)) ) { // Armar encabezado
                String partir[] = filasTexto.get(x).split(":");
                modelo.setValueAt(partir[0], x, 0);
                 modelo.setValueAt(partir[1], x, 4);
            }
            if( filasTexto.get(x).split(":")[0].equals("Compañia ") ) {//condicion para cargar numero de pagina y nombre compañia
                List<String> partir = getCompany(filasTexto.get(x+1));
                 modelo.setValueAt(partir.get(0), x, 1);
                 modelo.setValueAt(partir.get(1), x, 5);
            }
            if( hayFecha(filasTexto.get(x)) && hayDosPuntos(filasTexto.get(x-1)) ) {//condicion para las fechas del encabezado
                List<String> partir = getTitulo(filasTexto.get(x));
                 modelo.setValueAt(partir.get(0), x-1, 1);
                 modelo.setValueAt(partir.get(1), x-1, 5);
            }
            if( filasTexto.get(x).split(" ")[0].equals("Informe") ) {
                String partir[] = filasTexto.get(x).split(" ");
                 modelo.setValueAt(partir[0], x, 4);
                 modelo.setValueAt(partir[1], x, 5);
            }
            if( filasTexto.get(x).equals("Directorio") ) {
                 modelo.setValueAt("Directorio", x, 4);
                 modelo.setValueAt(filasTexto.get(x-1), x, 5);
                 modelo.setValueAt(filasTexto.get(x+1), x, 1);
            }
            if( isInteger(filasTexto.get(x).split(" ")[0]) && !isIndirect(filasTexto.get(x).split(" ")[0])) {//condicion para cargar los codigos de encabezados sin I
                modelo.setValueAt(filasTexto.get(x).split(" ")[0], x, 0);
            }
            if( !isInteger(filasTexto.get(x).split(" ")[0]) && isIndirect(filasTexto.get(x).split(" ")[0]) && x>filaInicioTxt()) {//condicion para cargar los codigos de encabezados con costo Indirecto
                modelo.setValueAt(filasTexto.get(x).split(" ")[0], x, 0);
            }
            if( filasTexto.get(x).equals("TOTAL CAPITULO") ) {
                 modelo.setValueAt(filasTexto.get(x), x, 1);
                 modelo.setValueAt(filasTexto.get(x+1), x, 5);
            }
            //condicion para acomodar la fila de costo directo e indirecto
            if( hayCosto(filasTexto.get(x)) ) {
                String partir[] = filasTexto.get(x).split(" ");
                if( partir.length == 3 ) {
                    modelo.setValueAt(partir[0] + " " + partir[1], x, 1);
                    modelo.setValueAt(partir[2], x, 5);
                }
                if( partir.length == 2 ) {
                    modelo.setValueAt(partir[0] + " " + partir[1], x, 1);
                    modelo.setValueAt(filasTexto.get(x-1), x, 5);
                }
            }
            if( filasTexto.get(x).split(" ")[0].equals("TOTAL") && filasTexto.get(x).split(" ")[1].equals("PRESUPUESTO") ) { 
                if( filasTexto.get(x).split(" ").length > 2 ) {//2 caso para total presupuessto
                    String partir[] = filasTexto.get(x).split(" ");
                    modelo.setValueAt(partir[0] + " " + partir[1] , x, 1);
                    modelo.setValueAt(partir[2], x, 5);
                }
                else {//1 caso para total presupuessto
                    modelo.setValueAt(filasTexto.get(x), x, 1);
                    modelo.setValueAt(filasTexto.get(x-1), x, 5);
                }
            }
            if( filasTexto.get(x).equals("Valor") && contarValores == 0 ) { //acomodar valor en la tabla
                filaValor = x;
                 modelo.setValueAt(filasTexto.get(x), x, 4);
                 modelo.setValueAt(filasTexto.get(x+1), x, 5);
                 contarValores++;
            }
            if(filasTexto.get(x).split(" ")[0].equals("Código")) { //armar el encabezado con Codigo
                contarValores = 0;
                String partir[] = filasTexto.get(x).split(" ");
                 modelo.setValueAt(partir[0], filaValor+1, 0);
                 modelo.setValueAt(partir[1], filaValor+1, 1);
//                 filasTexto.set(x, "");
            }
            if(filasTexto.get(x).split(" ")[0].equals("Und")) { //armar el encabezado con und
                String partir[] = filasTexto.get(x).split(" ");
                 modelo.setValueAt(partir[0], filaValor+1, 2);
                 modelo.setValueAt(partir[1], filaValor+1, 3);
            }
            if(filasTexto.get(x).equals("Total")) { //1 caso de acomodar total y unitario en la tabla
                modelo.setValueAt(filasTexto.get(x), filaValor+1, 5);
                modelo.setValueAt(filasTexto.get(x+1), filaValor+1, 4);
                filasTexto.set(x, "");
            }
            if(filasTexto.get(x).split(" ")[0].equals("Unitario") && filasTexto.get(x).split(" ").length > 1 ) { //2 caso de acomodar total y unitario en la tabla
                modelo.setValueAt(filasTexto.get(x).split(" ")[0], filaValor+1, 4);
                modelo.setValueAt(filasTexto.get(x).split(" ")[1], filaValor+1, 5);
            }
            //sacar la informacion de una fila con codigo
            if( x >= filaInicioTxt() ) {
                if( (isInteger(filasTexto.get(x).split(" ")[0]) || isIndirect(filasTexto.get(x).split(" ")[0])) ) {
                    List<String> datosFila = obtenerFilaOrdenada(filasTexto.get(x));
                    for( int index = 0 ; index < datosFila.size() ; index++ ) {
                        modelo.setValueAt(datosFila.get(index), x, (index+1));
                    }
                }
                else {
                    if( !esImportante(filasTexto.get(x).split(" ")[0]) && !isNumeric(filasTexto.get(x).split(" ")[0]) ) {
                        modelo.setValueAt(filasTexto.get(x), x, 1);
                    }
                }
            }
        }
        tabla.setModel(modelo);
    }
    
    private void ajustarTable() {
        TableColumnModel columnModel = tabla.getColumnModel();
        columnModel.getColumn(0).setPreferredWidth(75);
        columnModel.getColumn(0).setMaxWidth(75);
        columnModel.getColumn(0).setMinWidth(75);
        columnModel.getColumn(1).setPreferredWidth(360);
        columnModel.getColumn(1).setMaxWidth(360);
        columnModel.getColumn(1).setMinWidth(360);
        columnModel.getColumn(2).setPreferredWidth(40);
        columnModel.getColumn(2).setMaxWidth(40);
        columnModel.getColumn(2).setMinWidth(40);
        columnModel.getColumn(3).setPreferredWidth(100);
        columnModel.getColumn(3).setMaxWidth(100);
        columnModel.getColumn(3).setMinWidth(100);
        columnModel.getColumn(4).setPreferredWidth(120);
        columnModel.getColumn(4).setMaxWidth(120);
        columnModel.getColumn(4).setMinWidth(120);
        columnModel.getColumn(5).setPreferredWidth(130);
        columnModel.getColumn(5).setMaxWidth(130);
        columnModel.getColumn(5).setMinWidth(130);
    }
    
    private void obtenerTotales() {
        Globales.superTotal = new ArrayList<>(); //lista de las listas de los totales de los items
        Globales.posicionesTotal = new ArrayList<>(); //posiciones de todos los total capitulo del presupuesto
        Globales.filaPresupuesto = 0;
        Globales.filaDirecto = 0;
        Globales.filaIndirecto = 0;
        List<Integer> totales = new ArrayList<Integer>(); //guardar los totales de cada item
        int fila = tabla.getRowCount();
        for (int i = 0; i < fila; i++) {          
            if(!tabla.getValueAt(i, 2).toString().equals("") && i > 10 ) {
                      totales.add(i);
            }
            if(tabla.getValueAt(i, 1).toString().equals("TOTAL CAPITULO")) {
                Globales.posicionesTotal.add(i);
                Globales.superTotal.add(totales);
                totales = new ArrayList<Integer>();
            }
            if(tabla.getValueAt(i, 0).toString().equals("Código")) {
                Globales.filaCodigo = i;
            }
            if(tabla.getValueAt(i, 1).toString().equals("TOTAL PRESUPUESTO")) {
                Globales.filaPresupuesto = i;
            }
            if(tabla.getValueAt(i, 1).toString().equals("COSTO DIRECTO")) {
                Globales.filaDirecto = i;
            }
            if(tabla.getValueAt(i, 1).toString().equals("COSTO INDIRECTO")) {
                Globales.filaIndirecto = i;
            }
        }
    }
    
    private void abrirArchivo() {
        JFileChooser selector=new JFileChooser();
          FileNameExtensionFilter filter = new FileNameExtensionFilter("Archivos PDF", "pdf");
          selector.setFileFilter(filter);
          int op=selector.showOpenDialog(IGUFormulador.this);
          if(op==JFileChooser.APPROVE_OPTION){
            PdfReader read;
            try {
                filasTexto = new ArrayList<String>();//inicializo la lista para los string cada vez que abro un pdf
                read = new PdfReader(selector.getSelectedFile().getAbsolutePath());
                filePath = selector.getSelectedFile().getAbsolutePath();
                int pageCount = read.getNumberOfPages();
                for (int i = 1; i <= pageCount ; i++) { //lee el pdf por paginas
			textoPdf = PdfTextExtractor.getTextFromPage(read, i);     
                        obtenerFilasTxt(textoPdf);
		}
//                for( int x = 0; x < filasTexto.size() ; x++ ) { 
//                    System.out.println((x+1)+" - "+filasTexto.get(x)); 
//        //              filasTexto.add(arregloString[x]);
//                }
		read.close();               
                construirTabla();
                ajustarTable();
                eliminarEncabezados();
                obtenerTotales();
            } catch (IOException ex) {
                Logger.getLogger(IGUFormulador.class.getName()).log(Level.SEVERE, null, ex);
            }
          }
    }
    
    private void jmiAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiAbrirActionPerformed
        // TODO add your handling code here:
        abrirArchivo();
    }//GEN-LAST:event_jmiAbrirActionPerformed

    private void jmiSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiSalirActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jmiSalirActionPerformed

    private boolean tieneExtension( final String name ) {
        boolean retorno = false;
        String extension = "";
        int i = name.lastIndexOf('.');
        int p = Math.max(name.lastIndexOf('/'), name.lastIndexOf('\\'));
        if (i > p) {
            extension = name.substring(i+1);
        }
        if( extension.equals("xls") ) retorno = true;
        return retorno;
    }
    
    private boolean abrirExcel( final String nameFile ) {
        try {
                            
            Runtime.getRuntime().exec("cmd /c start "+nameFile);
            return true;
        } catch (IOException ex) {
            return false;
        }
    }
    
    private void jmiGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiGuardarActionPerformed
        // TODO add your handling code here:
        if (tabla.getValueAt(0, 0) != null) {
            String file = "";
            JFileChooser selector=new JFileChooser();
            selector.setDialogTitle("Guardar archivo");
            selector.setCurrentDirectory( new File(filePath));
            FileNameExtensionFilter filter = new FileNameExtensionFilter("Archivos EXCEL", "xls");
            selector.setFileFilter(filter);
            if (selector.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
                file = selector.getSelectedFile().toString();
                if( !tieneExtension(file) ) {
                    file +=".xls";
                }
                if( !file.equals("")) {
                    GuardarExcel objGuardarExcel = new GuardarExcel();//
                    if( objGuardarExcel.cargarArchivo(tabla, new File(file) ) ) {
                        objGuardarExcel.save();
//                        if( abrirExcel(file) == false ) VentanaError.mostarError("Excel no puede abrir este archivo");
                    }
                }
                else VentanaError.mostarError("El nombre del archivo esta vacio");
            }
        }
        else VentanaError.mostarError("La tabla esta vacia o no ha abierto algun PDF!");
    }//GEN-LAST:event_jmiGuardarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IGUFormulador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IGUFormulador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IGUFormulador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IGUFormulador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IGUFormulador().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem jmiAbrir;
    private javax.swing.JMenuItem jmiGuardar;
    private javax.swing.JMenuItem jmiSalir;
    private javax.swing.JTable tabla;
    // End of variables declaration//GEN-END:variables
}
